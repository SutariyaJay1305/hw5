Queue is Full!
Queue is Empty!
Queue is Empty!
Daikon version 5.8.18, released June 23, 2023; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
DataStructures.Queue:::OBJECT
this.queue != null
this.queue[] elements >= 0
this.front >= 0
this.rear >= -1
this.count >= 0
size(this.queue[])-1 != 0
===========================================================================
DataStructures.Queue.Queue(int):::ENTER
===========================================================================
DataStructures.Queue.Queue(int):::EXIT
this.queue[] elements == 0
this.front == 0
this.rear == -1
this.count == 0
===========================================================================
DataStructures.Queue.dequeue():::ENTER
this.rear >= 0
===========================================================================
DataStructures.Queue.dequeue():::EXIT34
this.front == orig(this.front)
this.count == orig(this.count)
this.queue has only one value
this.queue[] == [1, 0]
this.queue[] elements one of { 0, 1 }
this.front == 1
this.rear == 0
this.capacity == 2
this.count == 0
return == -2147483648
orig(this) has only one value
size(this.queue[]) == 2
===========================================================================
DataStructures.Queue.dequeue():::EXIT39
orig(this.count) >= 1
this.front != orig(this.front)
this.count - orig(this.count) + 1 == 0
===========================================================================
DataStructures.Queue.dequeue():::EXIT
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.rear == orig(this.rear)
this.capacity == orig(this.capacity)
(return == -2147483648)  <==>  (orig(this.count) == 0)
(return == -2147483648)  <==>  (this.count == orig(this.count))
(return == -2147483648)  <==>  (this.front == orig(this.front))
(return == -2147483648)  ==>  (orig(this) has only one value)
(return == -2147483648)  ==>  (orig(this.front) == 1)
(return == -2147483648)  ==>  (size(this.queue[]) == 2)
(return == -2147483648)  ==>  (this.capacity == 2)
(return == -2147483648)  ==>  (this.count == 0)
(return == -2147483648)  ==>  (this.front == 1)
(return == -2147483648)  ==>  (this.queue has only one value)
(return == -2147483648)  ==>  (this.queue[] == [1, 0])
(return == -2147483648)  ==>  (this.queue[] elements one of { 0, 1 })
(return == -2147483648)  ==>  (this.rear == 0)
this.rear >= 0
this.count <= orig(this.count)
===========================================================================
DataStructures.Queue.enqueue(int):::ENTER
this.front one of { 0, 2 }
===========================================================================
DataStructures.Queue.enqueue(int):::EXIT
this.queue == orig(this.queue)
this.front == orig(this.front)
this.capacity == orig(this.capacity)
size(this.queue[]) == orig(size(this.queue[]))
this.front one of { 0, 2 }
this.rear >= 0
this.count >= 1
this.queue[] >= orig(this.queue[]) (elementwise)
this.count >= orig(this.count)
===========================================================================
DataStructures.Queue.getLength():::ENTER
this.front one of { 0, 2 }
===========================================================================
DataStructures.Queue.getLength():::EXIT
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.front == orig(this.front)
this.rear == orig(this.rear)
this.capacity == orig(this.capacity)
this.count == orig(this.count)
this.front one of { 0, 2 }
===========================================================================
DataStructures.Queue.isEmpty():::ENTER
===========================================================================
DataStructures.Queue.isEmpty():::EXIT
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.front == orig(this.front)
this.rear == orig(this.rear)
this.capacity == orig(this.capacity)
this.count == orig(this.count)
(this.count == 0)  <==>  (return == true)
(this.count == 0)  ==>  (this.front one of { 0, 1 })
(this.count == 0)  ==>  (this.rear >= -1)
===========================================================================
DataStructures.Queue.isEmpty():::EXIT;condition="return == true"
this.front one of { 0, 1 }
this.count == 0
return == true
===========================================================================
DataStructures.Queue.isEmpty():::EXIT;condition="not(return == true)"
this.rear >= 0
this.count >= 1
return == false
===========================================================================
DataStructures.Queue.isFull():::ENTER
this.front one of { 0, 2 }
===========================================================================
DataStructures.Queue.isFull():::EXIT
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.front == orig(this.front)
this.rear == orig(this.rear)
this.capacity == orig(this.capacity)
this.count == orig(this.count)
(return == false)  ==>  (this.front one of { 0, 2 })
(return == false)  ==>  (this.queue[] elements >= 0)
(return == false)  ==>  (this.rear >= -1)
(return == true)  ==>  (size(this.queue[]) one of { 2, 3 })
(return == true)  ==>  (this.capacity one of { 2, 3 })
(return == true)  ==>  (this.count one of { 2, 3 })
(return == true)  ==>  (this.front == 0)
(return == true)  ==>  (this.queue[] one of { [1, 2], [2, 4, 6] })
(return == true)  ==>  (this.rear one of { 1, 2 })
this.front one of { 0, 2 }
===========================================================================
DataStructures.Queue.isFull():::EXIT;condition="return == true"
this.queue[] one of { [1, 2], [2, 4, 6] }
this.front == 0
this.rear one of { 1, 2 }
this.capacity one of { 2, 3 }
this.count one of { 2, 3 }
return == true
size(this.queue[]) one of { 2, 3 }
===========================================================================
DataStructures.Queue.isFull():::EXIT;condition="not(return == true)"
return == false
===========================================================================
DataStructures.Queue.peek():::ENTER
this.queue[] one of { [0, 0], [60, 20, 30, 40, 50] }
this.front one of { 0, 2 }
this.rear one of { -1, 0 }
this.capacity one of { 2, 5 }
this.count one of { 0, 1, 4 }
size(this.queue[]) one of { 2, 5 }
===========================================================================
DataStructures.Queue.peek():::EXIT57
this.queue has only one value
this.queue[] == [0, 0]
this.queue[] elements == 0
this.front == 0
this.rear == -1
this.capacity == 2
this.count == 0
return == -2147483648
orig(this) has only one value
size(this.queue[]) == 2
===========================================================================
DataStructures.Queue.peek():::EXIT59
this.queue has only one value
this.queue[] == [60, 20, 30, 40, 50]
this.rear == 0
this.capacity == 5
this.count one of { 1, 4 }
return one of { 30, 60 }
orig(this) has only one value
size(this.queue[]) == 5
===========================================================================
DataStructures.Queue.peek():::EXIT
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.front == orig(this.front)
this.rear == orig(this.rear)
this.capacity == orig(this.capacity)
this.count == orig(this.count)
(this.queue[] == [0, 0])  <==>  (return == -2147483648)
(this.queue[] == [0, 0])  <==>  (size(this.queue[]) == 2)
(this.queue[] == [0, 0])  <==>  (this.capacity == 2)
(this.queue[] == [0, 0])  <==>  (this.count == 0)
(this.queue[] == [0, 0])  <==>  (this.queue[] elements == 0)
(this.queue[] == [0, 0])  <==>  (this.rear == -1)
(this.queue[] == [0, 0])  ==>  (this.front == 0)
(this.queue[] == [60, 20, 30, 40, 50])  <==>  (return one of { 30, 60 })
(this.queue[] == [60, 20, 30, 40, 50])  <==>  (size(this.queue[]) == 5)
(this.queue[] == [60, 20, 30, 40, 50])  <==>  (this.capacity == 5)
(this.queue[] == [60, 20, 30, 40, 50])  <==>  (this.count one of { 1, 4 })
(this.queue[] == [60, 20, 30, 40, 50])  <==>  (this.rear == 0)
(this.queue[] == [60, 20, 30, 40, 50])  ==>  (this.front one of { 0, 2 })
this.queue[] one of { [0, 0], [60, 20, 30, 40, 50] }
this.front one of { 0, 2 }
this.rear one of { -1, 0 }
this.capacity one of { 2, 5 }
this.count one of { 0, 1, 4 }
return one of { -2147483648, 30, 60 }
size(this.queue[]) one of { 2, 5 }
===========================================================================
DataStructures.QueueTest:::CLASS
DataStructures.QueueTest.$assertionsDisabled == false
===========================================================================
DataStructures.QueueTest.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
DataStructures.QueueTest.main(java.lang.String[]):::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
DataStructures.QueueTest.testQueue1():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue1():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue2():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue2():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue3():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue3():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue4():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue4():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue5():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue5():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue6():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue6():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue7():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue7():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue8():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue8():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
===========================================================================
DataStructures.QueueTest.testQueue9():::ENTER
===========================================================================
DataStructures.QueueTest.testQueue9():::EXIT
DataStructures.QueueTest.$assertionsDisabled == orig(DataStructures.QueueTest.$assertionsDisabled)
Exiting Daikon.
